import numpy as np
import pandas as pd

#
# model_data=[[75, 107], [107, 121], [121, 135], [135, 145], [145, 164], [165, 168], [169, 186], [186, 199], [200, 216], [216, 273], [274, 288], [288, 312], [312, 332], [333, 336], [336, 345], [345, 357], [357, 381], [381, 417], [417, 426], [428, 434], [434, 471], [471, 484], [484, 499], [499, 505], [505, 524], [524, 527], [527, 539], [539, 548], [548, 571], [571, 574], [574, 589], [589, 609], [609, 618], [618, 637], [637, 659], [659, 663], [663, 696], [696, 708], [708, 724], [724, 742], [742, 758], [758, 777], [777, 794], [794, 815], [815, 848], [848, 867], [867, 877], [877, 880], [880, 904], [904, 937], [937, 943], [943, 961], [961, 972], [972, 982], [982, 998], [998, 1016], [1016, 1044], [1046, 1058], [1058, 1074], [1074, 1090], [1094, 1114], [1114, 1129], [1129, 1133], [1135, 1150], [1150, 1167], [1169, 1185], [1185, 1196], [1203, 1221], [1221, 1231], [1231, 1242], [1243, 1255], [1255, 1271], [1271, 1289], [1291, 1294], [1294, 1309], [1310, 1328], [1328, 1366], [1366, 1375], [1375, 1378], [1378, 1402], [1402, 1426], [1427, 1430], [1430, 1440], [1440, 1446], [1446, 1459], [1459, 1474], [1474, 1539], [1539, 1542], [1544, 1565], [1567, 1581], [1582, 1659], [1659, 1667], [1669, 1689], [1692, 1707], [1707, 1716], [1716, 1729], [1729, 1738], [1738, 1743], [1743, 1759], [1759, 1775], [1775, 1780], [1780, 1808], [1808, 1836], [1836, 1852], [1852, 1871], [1872, 1887], [1887, 1900], [1900, 1906], [1907, 1914], [1914, 1949], [1949, 1958], [1958, 1971], [1971, 1981], [1981, 1984], [1984, 1993], [1993, 2004], [2004, 2024], [2025, 2037], [2037, 2056], [2060, 2110], [2110, 2114], [2114, 2119], [2119, 2130], [2130, 2140], [2140, 2169], [2169, 2181], [2181, 2210], [2210, 2219], [2224, 2240], [2240, 2256], [2256, 2297], [2297, 2344], [2344, 2358], [2358, 2370], [2371, 2376], [2376, 2392], [2394, 2407], [2409, 2423], [2424, 2436], [2436, 2472], [2472, 2480], [2480, 2501], [2501, 2509], [2514, 2527], [2527, 2539], [2540, 2561], [2561, 2577], [2577, 2580], [2580, 2594], [2594, 2597], [2597, 2615], [2615, 2629], [2630, 2633], [2633, 2659], [2659, 2677], [2677, 2696], [2696, 2699], [2700, 2715], [2717, 2746], [2746, 2778], [2778, 2806], [2806, 2820], [2820, 2830], [2830, 2843], [2843, 2870], [2873, 2887], [2887, 2900], [2900, 2920], [2920, 2929], [2934, 2958], [2958, 2978], [2978, 2992], [2992, 2995], [2995, 3001], [3001, 3004], [3004, 3027], [3027, 3033], [3033, 3057], [3057, 3065], [3066, 3095], [3096, 3109], [3109, 3112], [3112, 3122], [3122, 3128], [3129, 3143], [3143, 3163], [3163, 3181], [3181, 3200], [3200, 3208], [3209, 3229], [3229, 3244], [3244, 3262], [3262, 3292], [3292, 3303], [3303, 3325], [3325, 3331], [3335, 3350], [3350, 3364], [3364, 3382], [3382, 3401], [3401, 3413], [3420, 3423], [3423, 3448], [3448, 3451], [3451, 3461], [3461, 3472], [3472, 3477], [3479, 3512], [3512, 3582], [3582, 3596], [3596, 3612], [3612, 3622], [3622, 3639], [3639, 3652], [3652, 3655], [3655, 3664], [3664, 3682], [3682, 3692], [3692, 3716], [3716, 3720], [3720, 3723], [3724, 3738], [3738, 3751], [3751, 3784], [3784, 3788], [3788, 3806], [3806, 3825], [3825, 3835], [3835, 3845], [3845, 3863], [3863, 3888], [3888, 3891], [3891, 3911], [3911, 3923], [3923, 3960], [3960, 3977], [3977, 3980], [3980, 4013], [4013, 4024], [4024, 4057], [4062, 4074], [4074, 4083], [4083, 4099], [4099, 4116], [4116, 4119], [4119, 4160], [4160, 4173], [4173, 4189], [4189, 4193], [4195, 4209], [4211, 4222], [4222, 4253], [4253, 4256], [4256, 4288], [4288, 4309], [4309, 4335], [4335, 4381], [4415, 4429], [4430, 4434], [4438, 4455], [4455, 4496], [4496, 4499], [4499, 4524], [4525, 4538], [4525, 4538], [4538, 4542]]
# method_data=[[75, 119], [119, 147], [147, 153], [153, 159], [159, 215], [215, 249], [250, 256], [258, 281], [281, 287], [296, 308], [309, 330], [330, 374], [374, 407], [409, 433], [433, 444], [444, 483], [483, 519], [520, 530], [530, 546], [546, 569], [569, 617], [626, 632], [636, 661], [662, 683], [685, 710], [711, 723], [723, 740], [744, 748], [748, 757], [757, 767], [771, 776], [779, 820], [820, 833], [838, 866], [867, 884], [884, 895], [896, 902], [902, 931], [932, 941], [942, 971], [978, 1088], [1088, 1183], [1183, 1219], [1219, 1253], [1254, 1300], [1300, 1313], [1315, 1327], [1327, 1373], [1373, 1398], [1398, 1446], [1447, 1463], [1463, 1483], [1483, 1507], [1507, 1535], [1536, 1563], [1563, 1581], [1582, 1620], [1630, 1664], [1666, 1715], [1715, 1734], [1743, 1762], [1762, 1774], [1774, 1780], [1781, 1795], [1797, 1833], [1835, 1844], [1844, 1863], [1863, 1886], [1886, 1913], [1918, 1945], [1946, 1992], [1992, 2004], [2004, 2013], [2013, 2086], [2087, 2095], [2096, 2118], [2123, 2136], [2136, 2182], [2183, 2204], [2204, 2263], [2263, 2289], [2289, 2295], [2295, 2308], [2308, 2318], [2318, 2357], [2357, 2408], [2410, 2431], [2432, 2477], [2481, 2536], [2537, 2573], [2573, 2582], [2582, 2597], [2597, 2617], [2617, 2627], [2627, 2651], [2653, 2694], [2695, 2743], [2743, 2772], [2773, 2808], [2808, 2850], [2850, 2900], [2900, 2917], [2917, 2933], [2933, 2971], [2971, 2984], [2987, 3033], [3034, 3055], [3055, 3127], [3127, 3160], [3160, 3177], [3190, 3253], [3272, 3284], [3284, 3302], [3303, 3319], [3319, 3359], [3359, 3379], [3379, 3399], [3399, 3445], [3445, 3480], [3480, 3507], [3507, 3573], [3573, 3610], [3611, 3637], [3637, 3656], [3661, 3679], [3680, 3691], [3691, 3713], [3725, 3792], [3796, 3806], [3811, 3817], [3818, 3861], [3862, 3882], [3882, 3900], [3900, 3914], [3917, 3935], [3936, 3955], [3967, 4019], [4022, 4068], [4068, 4081], [4083, 4115], [4119, 4140], [4140, 4183], [4188, 4197], [4198, 4220], [4221, 4256], [4258, 4305], [4307, 4316], [4323, 4376], [4421, 4496], [4500, 4543]]
# CTCF_data= [75, 77, 78, 81, 83, 84, 86, 88, 89, 92, 102, 104, 105, 106, 110, 111, 113, 114, 115, 118, 119, 120, 121, 122, 123, 124, 125, 127, 132, 133, 134, 140, 142, 143, 145, 147, 152, 153, 158, 159, 163, 166, 177, 213, 214, 245, 248, 250, 251, 252, 254, 255, 256, 257, 259, 264, 265, 266, 267, 268, 274, 275, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 298, 302, 305, 307, 310, 324, 327, 329, 336, 337, 339, 349, 351, 353, 355, 363, 365, 385, 394, 405, 409, 415, 420, 427, 433, 439, 443, 444, 446, 448, 450, 453, 456, 463, 466, 468, 469, 470, 476, 479, 481, 482, 483, 484, 486, 487, 490, 491, 494, 495, 496, 504, 505, 508, 510, 511, 513, 514, 515, 517, 518, 520, 525, 527, 528, 529, 530, 534, 545, 547, 561, 562, 563, 564, 568, 571, 573, 576, 585, 586, 590, 600, 603, 606, 608, 610, 612, 613, 615, 617, 619, 620, 621, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 644, 645, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 661, 662, 667, 669, 670, 671, 672, 673, 674, 676, 677, 678, 682, 683, 684, 685, 686, 689, 690, 691, 693, 694, 695, 698, 699, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 717, 719, 720, 722, 723, 726, 727, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 750, 751, 753, 755, 757, 758, 759, 761, 762, 765, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 786, 787, 788, 789, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 823, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 847, 848, 858, 859, 862, 863, 865, 867, 868, 870, 872, 874, 876, 878, 880, 884, 885, 886, 887, 889, 890, 892, 894, 895, 896, 901, 902, 903, 904, 914, 929, 930, 933, 940, 941, 944, 945, 951, 955, 956, 957, 959, 960, 961, 962, 963, 964, 966, 968, 969, 970, 971, 973, 976, 978, 980, 981, 1017, 1022, 1026, 1072, 1086, 1087, 1088, 1089, 1091, 1093, 1098, 1101, 1104, 1105, 1108, 1122, 1151, 1179, 1183, 1191, 1218, 1219, 1229, 1230, 1232, 1239, 1240, 1245, 1250, 1254, 1260, 1261, 1264, 1267, 1268, 1275, 1276, 1278, 1281, 1282, 1284, 1286, 1292, 1294, 1297, 1301, 1302, 1306, 1310, 1311, 1312, 1313, 1315, 1317, 1320, 1321, 1323, 1324, 1326, 1329, 1333, 1348, 1349, 1357, 1373, 1378, 1396, 1399, 1424, 1429, 1430, 1433, 1438, 1442, 1444, 1447, 1451, 1453, 1454, 1456, 1457, 1458, 1460, 1462, 1463, 1476, 1481, 1483, 1484, 1485, 1486, 1487, 1489, 1490, 1491, 1493, 1495, 1496, 1497, 1499, 1500, 1504, 1506, 1507, 1508, 1509, 1514, 1516, 1532, 1533, 1537, 1557, 1559, 1561, 1562, 1578, 1582, 1583, 1588, 1607, 1616, 1617, 1618, 1619, 1620, 1621, 1623, 1624, 1629, 1631, 1637, 1640, 1647, 1650, 1652, 1654, 1656, 1658, 1662, 1665, 1670, 1682, 1685, 1693, 1699, 1701, 1702, 1704, 1705, 1706, 1710, 1714, 1715, 1722, 1723, 1727, 1729, 1730, 1731, 1733, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1749, 1752, 1758, 1759, 1760, 1761, 1762, 1763, 1765, 1767, 1770, 1771, 1772, 1773, 1774, 1777, 1779, 1781, 1782, 1784, 1785, 1787, 1789, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1800, 1801, 1803, 1805, 1806, 1808, 1812, 1814, 1815, 1817, 1819, 1822, 1824, 1825, 1827, 1828, 1830, 1831, 1832, 1833, 1834, 1835, 1840, 1842, 1844, 1845, 1846, 1847, 1852, 1853, 1860, 1862, 1863, 1870, 1872, 1874, 1877, 1885, 1886, 1887, 1888, 1890, 1892, 1893, 1895, 1897, 1898, 1899, 1901, 1902, 1903, 1904, 1905, 1910, 1911, 1912, 1913, 1917, 1919, 1920, 1922, 1927, 1928, 1929, 1930, 1931, 1932, 1933, 1938, 1940, 1946, 1947, 1957, 1967, 1968, 1977, 1980, 1983, 1987, 1990, 1992, 2002, 2007, 2010, 2011, 2012, 2013, 2033, 2043, 2060, 2071, 2079, 2086, 2087, 2088, 2090, 2106, 2107, 2108, 2110, 2111, 2112, 2114, 2115, 2116, 2117, 2118, 2119, 2121, 2124, 2127, 2128, 2133, 2135, 2143, 2157, 2181, 2182, 2183, 2234, 2243, 2257, 2261, 2262, 2265, 2266, 2267, 2269, 2271, 2272, 2273, 2275, 2276, 2277, 2278, 2282, 2283, 2286, 2287, 2288, 2290, 2294, 2295, 2296, 2297, 2301, 2303, 2304, 2306, 2307, 2308, 2310, 2311, 2316, 2317, 2318, 2319, 2320, 2321, 2322, 2325, 2326, 2329, 2331, 2332, 2334, 2337, 2340, 2341, 2342, 2343, 2344, 2346, 2347, 2352, 2353, 2355, 2356, 2357, 2358, 2365, 2376, 2382, 2383, 2387, 2398, 2404, 2410, 2432, 2462, 2476, 2528, 2532, 2534, 2537, 2538, 2540, 2541, 2542, 2543, 2546, 2547, 2548, 2551, 2553, 2557, 2560, 2562, 2563, 2564, 2571, 2572, 2573, 2574, 2579, 2581, 2582, 2584, 2588, 2589, 2590, 2592, 2595, 2596, 2599, 2605, 2606, 2607, 2608, 2610, 2612, 2613, 2614, 2615, 2617, 2618, 2622, 2623, 2624, 2625, 2626, 2627, 2628, 2629, 2630, 2631, 2632, 2634, 2638, 2641, 2643, 2648, 2650, 2651, 2654, 2656, 2657, 2668, 2670, 2673, 2692, 2693, 2694, 2695, 2713, 2737, 2738, 2743, 2744, 2751, 2755, 2760, 2762, 2766, 2770, 2800, 2801, 2802, 2804, 2805, 2807, 2808, 2809, 2815, 2816, 2826, 2828, 2831, 2832, 2833, 2834, 2837, 2841, 2842, 2844, 2849, 2850, 2852, 2866, 2873, 2884, 2892, 2897, 2898, 2901, 2914, 2916, 2917, 2918, 2920, 2925, 2926, 2927, 2928, 2929, 2931, 2932, 2934, 2936, 2943, 2948, 2950, 2951, 2952, 2953, 2955, 2956, 2957, 2959, 2960, 2961, 2963, 2964, 2965, 2967, 2969, 2970, 2971, 2974, 2975, 2976, 2977, 2978, 2979, 2981, 2983, 2984, 2985, 2987, 2989, 2990, 2991, 2993, 2994, 2996, 2997, 2999, 3000, 3001, 3002, 3006, 3007, 3011, 3017, 3019, 3020, 3021, 3022, 3023, 3024, 3025, 3027, 3028, 3029, 3030, 3031, 3032, 3034, 3038, 3040, 3041, 3045, 3047, 3048, 3049, 3050, 3051, 3053, 3054, 3055, 3057, 3059, 3061, 3062, 3063, 3064, 3066, 3069, 3078, 3089, 3090, 3098, 3118, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128, 3132, 3134, 3135, 3137, 3138, 3139, 3142, 3144, 3145, 3146, 3151, 3154, 3156, 3158, 3160, 3161, 3162, 3164, 3165, 3170, 3171, 3172, 3174, 3175, 3177, 3178, 3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3192, 3194, 3197, 3198, 3204, 3205, 3206, 3209, 3211, 3213, 3217, 3219, 3221, 3222, 3223, 3225, 3226, 3227, 3230, 3231, 3232, 3235, 3237, 3238, 3241, 3242, 3246, 3247, 3249, 3251, 3252, 3253, 3254, 3255, 3256, 3260, 3261, 3263, 3264, 3269, 3271, 3272, 3273, 3274, 3275, 3276, 3281, 3282, 3283, 3284, 3289, 3290, 3291, 3294, 3295, 3298, 3299, 3300, 3301, 3302, 3303, 3305, 3307, 3308, 3313, 3316, 3318, 3319, 3321, 3323, 3330, 3334, 3336, 3346, 3348, 3357, 3359, 3362, 3365, 3370, 3373, 3378, 3379, 3380, 3384, 3389, 3392, 3394, 3395, 3399, 3400, 3402, 3406, 3409, 3410, 3413, 3420, 3423, 3438, 3444, 3446, 3452, 3457, 3480, 3485, 3488, 3490, 3494, 3496, 3497, 3499, 3508, 3512, 3517, 3518, 3526, 3547, 3551, 3554, 3560, 3565, 3567, 3568, 3569, 3570, 3572, 3573, 3584, 3586, 3588, 3591, 3592, 3593, 3594, 3595, 3600, 3601, 3602, 3603, 3604, 3606, 3607, 3609, 3610, 3611, 3612, 3613, 3615, 3617, 3624, 3632, 3633, 3634, 3635, 3637, 3638, 3639, 3640, 3642, 3643, 3644, 3646, 3650, 3651, 3652, 3653, 3654, 3655, 3656, 3659, 3660, 3661, 3662, 3668, 3669, 3674, 3675, 3677, 3678, 3679, 3680, 3681, 3687, 3689, 3690, 3691, 3693, 3696, 3697, 3698, 3704, 3705, 3709, 3710, 3712, 3713, 3714, 3716, 3718, 3724, 3725, 3729, 3734, 3738, 3741, 3746, 3750, 3752, 3757, 3759, 3760, 3762, 3764, 3766, 3770, 3782, 3787, 3789, 3792, 3793, 3794, 3795, 3796, 3797, 3798, 3800, 3804, 3805, 3806, 3807, 3808, 3809, 3810, 3811, 3812, 3813, 3814, 3816, 3818, 3819, 3821, 3822, 3823, 3824, 3827, 3831, 3832, 3833, 3834, 3835, 3837, 3838, 3840, 3841, 3843, 3844, 3845, 3846, 3849, 3850, 3851, 3853, 3854, 3856, 3857, 3858, 3859, 3860, 3861, 3862, 3863, 3864, 3866, 3868, 3869, 3870, 3871, 3872, 3875, 3876, 3877, 3878, 3880, 3882, 3883, 3885, 3886, 3887, 3888, 3889, 3890, 3891, 3894, 3895, 3899, 3900, 3902, 3903, 3904, 3905, 3907, 3908, 3910, 3911, 3912, 3913, 3914, 3915, 3916, 3917, 3918, 3920, 3921, 3923, 3925, 3927, 3929, 3930, 3931, 3932, 3935, 3936, 3939, 3943, 3944, 3945, 3946, 3947, 3948, 3949, 3950, 3951, 3952, 3953, 3954, 3955, 3959, 3960, 3961, 3962, 3963, 3964, 3966, 3967, 3968, 3971, 3972, 3974, 3980, 3981, 3995, 3999, 4004, 4005, 4006, 4010, 4013, 4014, 4017, 4018, 4019, 4021, 4025, 4026, 4033, 4044, 4051, 4056, 4058, 4060, 4062, 4066, 4068, 4069, 4070, 4071, 4072, 4073, 4074, 4075, 4077, 4078, 4079, 4080, 4081, 4082, 4083, 4084, 4085, 4088, 4090, 4091, 4092, 4093, 4094, 4096, 4097, 4098, 4099, 4100, 4104, 4105, 4106, 4107, 4108, 4109, 4110, 4112, 4113, 4115, 4116, 4117, 4118, 4119, 4120, 4122, 4123, 4126, 4127, 4129, 4130, 4132, 4133, 4135, 4138, 4139, 4140, 4141, 4143, 4144, 4145, 4146, 4147, 4148, 4149, 4150, 4154, 4155, 4156, 4157, 4158, 4159, 4160, 4165, 4166, 4167, 4168, 4169, 4170, 4171, 4172, 4173, 4175, 4176, 4177, 4181, 4182, 4183, 4184, 4185, 4186, 4187, 4188, 4192, 4193, 4194, 4195, 4196, 4197, 4198, 4199, 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4211, 4212, 4213, 4214, 4216, 4217, 4218, 4219, 4220, 4221, 4222, 4223, 4224, 4227, 4228, 4229, 4230, 4233, 4237, 4239, 4240, 4241, 4243, 4244, 4246, 4247, 4248, 4250, 4251, 4252, 4253, 4254, 4255, 4256, 4257, 4258, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4271, 4272, 4276, 4278, 4279, 4281, 4282, 4283, 4295, 4296, 4297, 4298, 4299, 4300, 4301, 4303, 4305, 4306, 4307, 4308, 4309, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4319, 4320, 4322, 4323, 4324, 4325, 4326, 4327, 4329, 4331, 4332, 4334, 4335, 4340, 4352, 4353, 4356, 4357, 4359, 4362, 4365, 4366, 4367, 4368, 4369, 4444, 4445, 4446, 4449, 4450, 4451, 4453, 4456, 4457, 4459, 4460, 4461, 4462, 4465, 4470, 4473, 4474, 4479, 4482, 4484, 4485, 4486, 4489, 4490, 4491, 4494, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4504, 4505, 4507, 4509, 4510, 4511, 4512, 4513, 4515, 4516, 4517, 4518, 4519, 4520, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4540, 4541]

# # def Evaluate_Two_Method(model_TAD_list,methpd_TAD_list,CTCF_list):\
#----------------------------
# model_data=[[75, 107], [107, 121], [121, 135], [135, 145]]
# method_data = [[75, 119], [119, 147], [147, 153], [153, 159], [159, 215], [215, 249], [250, 256], [258, 281],
#                [281, 287], [296, 308]]
# CTCF_data=[75, 77, 78, 81, 83, 84, 86, 88, 89, 92, 102, 104, 105, 106, 110, 111, 113, 114, 115, 118, 119, 120,121,147]
# matrix_size=4542
# # #-------------------------------
# # model_count=0
# print(len(model_data))
#
# for i in range(0,len(model_data)):
#     print(model_data[i][0])
# print(CTCF_data[0])



def comparefunction(compare_data,CTCF_data,matrix_size):
    count=0
    count_match=0
    count_miss_match=0
    temp=[]
    #--------------------------------------------------------------------------------
    # compare_data=np.unique( compare_data)
    # temp=[]
    #
    # test_count=0
    # for frint_back in range(0, 2):
    #     for i in compare_data:
    #         # print("---->", i[frint_back])
    #         temp.append(i[frint_back])
    # for jojo in  CTCF_data:
    #     for dio in temp:
    #         if jojo==dio:
    #             test_count=test_count+1
    #
    #
    # print("---->",test_count)
    # #--------------------------------------------------------------------------------
    # compare_data_difference = list(set(compare_data).difference(set(CTCF_data)))
    # difference = list(set( CTCF_data).difference(set(compare_data)))
    # # print( difference)
    # CTCF_data=difference
    #
    # for frint_back in range(0,len(compare_data_difference )):
    #     # print(i)
    #     for j in range(0, len(CTCF_data)):
    #         if compare_data[frint_back] == CTCF_data[j]:
    #             # count = count + 1
    #             count = count + 0
    #             # print("here",i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
    #             break
    #         else:
    #             # print("i is-->",i[0])
    #             if compare_data[frint_back] > 0 and compare_data[frint_back] < matrix_size:
    #                 if compare_data[frint_back] + 1 == CTCF_data[j]:
    #                     count = count + 1
    #                     # print("here!!!!", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
    #                     break
    #                 else:
    #                     if compare_data[frint_back] - 1 == CTCF_data[j]:
    #                         count = count + 1
    #                         # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
    #                         break
    #     # # print(count)
    # print(count)
    # return count
    #-----------------------------------------------------------------08-24
    for i in compare_data:
        inside_frint = i[0] in CTCF_data
        inside_back = i[1] in CTCF_data
        # inside_frint = i[0] in CTCF_data or i[0]-1 in CTCF_data or i[0]+1 in CTCF_data
        # inside_back = i[1] in CTCF_data or i[1]-1 in CTCF_data or i[1]+1 in CTCF_data
        # print("inside_frint",inside_frint)
        if  inside_frint==True  and inside_back==True :
            count = count + 1
            count_match= count_match+1
            count_miss_match = count_miss_match + 1
    #------------------------------------------------------
    # for frint_back in range(0,2):
    #     for k in compare_data:
    #         # print("---->", i[frint_back])
    #         temp.append(k[frint_back])
    # for i in temp:
    #     # print("iiiii",i)
    #     # print("CTCF",CTCF_data)
    #     # print("???",i in CTCF_data)
    #     inside=i in CTCF_data
    #     if inside== True:
    #         count = count + 1
    #         count_match= count_match+1
        # else:
        #     # for jojo in CTCF_data:
        #         inside_v1 = i-1 in CTCF_data
        #         inside_v2 = i + 1 in CTCF_data
        #         if   inside_v1==True or  inside_v2==True:
        #             count = count + 1
        #             count_miss_match=count_miss_match+1
                    # break
    # for dio in range(0,len(temp)):
    #     for jojo in CTCF_data:
    #         if jojo==temp[dio]:
    #             count = count + 1
    #             count_match= count_match+1
    #             break
    #         else:
    #             if (temp[dio] + 1==jojo) or (temp[dio]-1 ==jojo):
    #                 count = count + 1
    #     #                 count_miss_match=count_miss_match+1

    #---------------------------------------------------------------origin
    # for frint_back in range(0, 2):
    #     for i in compare_data:
    #         # print(i)
    #         for j in range(0, len(CTCF_data)):
    #             if i[frint_back] == CTCF_data[j]:
    #                 count = count + 1
    #                 count_match= count_match+1
    #                 # count = count + 0
    #                 # print("here",i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
    #                 break
    #             else:
    #
    #                 # print("i is-->",i[0])
    #                 if i[frint_back] > 0 and i[frint_back] < matrix_size:
    #                     if i[frint_back] + 1 == CTCF_data[j] or  i[frint_back] - 1 == CTCF_data[j]:
    #                        count = count + 1
    #                        count_miss_match=count_miss_match+1
    #                        # print("here!!!!", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
    #                        break

                        # if i[frint_back] - 1 == CTCF_data[j]:
                        #         count = count + 1
                        #         count_miss_match=count_miss_match+1
                        #         # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
                        #         break
                        # if i[frint_back] + 2 == CTCF_data[j]:
                        #     count = count + 1
                        #     # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
                        #     break
                        # if i[frint_back] - 2 == CTCF_data[j]:
                        #     count = count + 1
                        #     # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
                        #     break
                        # if i[frint_back] + 3 == CTCF_data[j]:
                        #     count = count + 1
                        #     # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
                        #     break
                        # if i[frint_back] - 3 == CTCF_data[j]:
                        #     count = count + 1
                        #     # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j," frint_back:",frint_back)
                        #     break

    print(count)
    print("count_match", count_match)
    print("count_miss_match",count_miss_match)



    return  count,count_match,count_miss_match






# model_count=comparefunction(model_data,CTCF_data,matrix_size)
# print("model_count  ",model_count)
# # print("------------------------------------------------------------------")
# method_count=comparefunction(method_data,CTCF_data,matrix_size)
#
# # print("model_count  ",model_count)
# print("method_count  ",method_count)













# for frint_back in range(0,2):
#     for i in compare_data:
#         for j in range(0,len(CTCF_data)):
#             if i[frint_back]==CTCF_data[j]:
#                 model_count=model_count+1
#                 # print("here",i[frint_back],"---",CTCF_data[j],"-->j: ",j)
#             else:
#                 # print("i is-->",i[0])
#                 if  i[frint_back]>0and i[frint_back]<matrix_size:
#                     if i[frint_back]+1 == CTCF_data[j]:
#                         model_count = model_count + 1
#                         # print("here!!!!", i[frint_back],"---",CTCF_data[j],"-->j: ",j)
#                     else:
#                         if i[frint_back]-1 == CTCF_data[j]:
#                             model_count = model_count + 1
#                             # print("here???", i[frint_back],"---",CTCF_data[j],"-->j: ",j)
#
# print(model_count)